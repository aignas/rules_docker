module(
    name = "example_bzlmod",
    version = "0.0.0",
    compatibility_level = 1,
)

bazel_dep(name = "rules_docker", version = "0.0.0")
local_path_override(
    module_name = "rules_docker",
    path = "../..",
)

# OPTIONAL: Add this to override the default docker toolchain configuration.
#
# Note this is only required if you actually want to call
# docker_toolchain_configure with a custom attr; please read the toolchains
# docs in /toolchains/docker/ before blindly adding this to your MODULE.bazel.
# BEGIN OPTIONAL segment:
docker_toolchain = use_extension("@rules_docker//:extensions.bzl", "docker_toolchain")
docker_toolchain.configure(
    name = "docker_config",
    # OPTIONAL: Bazel target for the build_tar tool, must be compatible with build_tar.py
    #build_tar_target="<enter absolute path (i.e., must start with repo name @...//:...) to an executable build_tar target>",
    # OPTIONAL: Path to a directory which has a custom docker client config.json.
    # See https://docs.docker.com/engine/reference/commandline/cli/#configuration-files
    # for more details.
    #client_config="<enter Bazel label to your docker config.json here>",
    # OPTIONAL: Path to the docker binary.
    # Should be set explicitly for remote execution.
    #docker_path="<enter absolute path to the docker binary (in the remote exec env) here>",
    # OPTIONAL: Path to the gzip binary.
    #gzip_path="<enter absolute path to the gzip binary (in the remote exec env) here>",
    # OPTIONAL: Bazel target for the gzip tool.
    #gzip_target="<enter absolute path (i.e., must start with repo name @...//:...) to an executable gzip target>",
    # OPTIONAL: Path to the xz binary.
    # Should be set explicitly for remote execution.
    #xz_path="<enter absolute path to the xz binary (in the remote exec env) here>",
    # OPTIONAL: Bazel target for the xz tool.
    # Either xz_path or xz_target should be set explicitly for remote execution.
    #xz_target="<enter absolute path (i.e., must start with repo name @...//:...) to an executable xz target>",
    # OPTIONAL: List of additional flags to pass to the docker command.
    #docker_flags = [
    #    "--tls",
    #    "--log-level=info",
    #],
)
use_repo(docker_toolchain, "docker_config")
register_toolchains(
    # Register the toolchains resulting from the configuration.
    "@docker_config//:default_linux_toolchain",
    "@docker_config//:default_windows_toolchain",
    "@docker_config//:default_osx_toolchain",
)
# End of OPTIONAL segment.

container = use_extension("@rules_docker//:extensions.bzl", "container")
container.pull(
    name = "alpine_linux_amd64",
    digest = "sha256:954b378c375d852eb3c63ab88978f640b4348b01c1b3456a024a81536dafbbf4",
    registry = "index.docker.io",
    repository = "library/alpine",
    # tag field is ignored since digest is set
    tag = "3.8",
)
use_repo(container, "alpine_linux_amd64")
